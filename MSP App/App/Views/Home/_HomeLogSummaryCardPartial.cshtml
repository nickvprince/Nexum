@model ICollection<Tenant>?

@{
    var activeDeviceId = Context.Session.GetString("ActiveDeviceId");
    var activeTenantId = Context.Session.GetString("ActiveTenantId");

    int totalLogsCount;
    int totalLogsTodayCount;

    int traceLogsCount;
    int debugLogsCount;
    int informationLogsCount;
    int warningLogsCount;
    int errorLogsCount;

    if (activeDeviceId != null)
    {
        totalLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.DeviceId == int.Parse(activeDeviceId))
            .Count() ?? 0;

        totalLogsTodayCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.DeviceId == int.Parse(activeDeviceId) && l.Time >= DateTime.Now.AddHours(-24))
            .Count() ?? 0;

        traceLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.DeviceId == int.Parse(activeDeviceId) && l.Type == LogType.Trace)
            .Count() ?? 0;

        debugLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.DeviceId == int.Parse(activeDeviceId) && l.Type == LogType.Debug)
            .Count() ?? 0;

        informationLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.DeviceId == int.Parse(activeDeviceId) && l.Type == LogType.Information)
            .Count() ?? 0;

        warningLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.DeviceId == int.Parse(activeDeviceId) && l.Type == LogType.Warning)
            .Count() ?? 0;

        errorLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.DeviceId == int.Parse(activeDeviceId) && l.Type == LogType.Error)
            .Count() ?? 0;
    }
    else
    {
        totalLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Count() ?? 0;

        totalLogsTodayCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.Time >= DateTime.Now.AddHours(-24))
            .Count() ?? 0;

        traceLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.Type == LogType.Trace)
            .Count() ?? 0;

        debugLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.Type == LogType.Debug)
            .Count() ?? 0;

        informationLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.Type == LogType.Information)
            .Count() ?? 0;

        warningLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.Type == LogType.Warning)
            .Count() ?? 0;

        errorLogsCount = Model?.Where(t => t.Devices != null)
            .SelectMany(t => t.Devices!)
            .Where(d => d.Logs != null)
            .SelectMany(d => d.Logs!)
            .Where(l => l.Type == LogType.Error)
            .Count() ?? 0;
    }
}
<div class="card nexum-summary-card bg-nexum-dark nexum-card-shadow-light text-nexum-light">
    <div class="card-body">
        <h5 class="nexum-summary-card-title">Logs Summary</h5>
        <div class="row">
            <div class="col-12 d-flex flex-wrap justify-content-between">
                <div class="nexum-mini-card bg-mini-card d-flex align-items-center m-1">
                    <i class="bi bi-file-earmark-text-fill nexum-summary-icon"></i>
                    <span>Total Logs: @totalLogsCount</span>
                </div>
                <div class="nexum-mini-card bg-mini-card d-flex align-items-center m-1">
                    <i class="bi bi-file-earmark-plus-fill nexum-summary-icon"></i>
                    <span>Logs Today: @totalLogsTodayCount</span>
                </div>
            </div>
        </div>
        <h5 class="nexum-summary-card-title mt-3">Logs by Type</h5>
        <div class="row">
            <div class="col-12 d-flex flex-wrap justify-content-between">
                <div class="nexum-mini-card d-flex align-items-center m-1" style="background-color: rgba(198, 186, 210, 0.15);">
                    <i class="bi bi-info-circle-fill nexum-summary-icon"></i>
                    <span>Trace: @traceLogsCount</span>
                </div>
                <div class="nexum-mini-card d-flex align-items-center m-1" style="background-color: rgba(198, 186, 210, 0.25);">
                    <i class="bi bi-bug-fill nexum-summary-icon"></i>
                    <span>Debug: @debugLogsCount</span>
                </div>
                <div class="nexum-mini-card d-flex align-items-center m-1" style="background-color: rgba(198, 186, 210, 0.35);">
                    <i class="bi bi-info-circle-fill nexum-summary-icon"></i>
                    <span>Information: @informationLogsCount</span>
                </div>
                <div class="nexum-mini-card d-flex align-items-center m-1" style="background-color: rgba(198, 186, 210, 0.45);">
                    <i class="bi bi-exclamation-circle-fill nexum-summary-icon"></i>
                    <span>Warning: @warningLogsCount</span>
                </div>
                <div class="nexum-mini-card d-flex align-items-center m-1" style="background-color: rgba(198, 186, 210, 0.50);">
                    <i class="bi bi-x-circle-fill nexum-summary-icon"></i>
                    <span>Error: @errorLogsCount</span>
                </div>
            </div>
        </div>
    </div>
</div>